// src/components/AIAssignmentHelper.js
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';
import html2pdf from 'html2pdf.js';
import './AIAssignmentHelper.css';

const AIAssignmentHelper = () => {
  const [formData, setFormData] = useState({
    subject: '',
    topic: '',
    details: '',
    studentName: localStorage.getItem('studentName') || '',
    school: localStorage.getItem('school') || '',
    course: localStorage.getItem('course') || ''
  });
  
  const [showUserDetails, setShowUserDetails] = useState(false);
  const [loading, setLoading] = useState(false);
  const [solution, setSolution] = useState(null);
  const [error, setError] = useState(null);
  const [downloadingPdf, setDownloadingPdf] = useState(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Save user details to localStorage
    if(['studentName', 'school', 'course'].includes(name)) {
      localStorage.setItem(name, value);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      const response = await axios.post('https://flashcards-2iat.onrender.com/api/write-assignment', {
        ...formData,
        deadline: new Date().toISOString() // Current date as default deadline
      });

      if (response.data.success) {
        setSolution(response.data.data.content);
      } else {
        throw new Error('Failed to generate assignment');
      }
    } catch (error) {
      setError(error.response?.data?.error || 'An error occurred while processing your request');
      console.error('Assignment generation error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadPDF = async () => {
    if (!solution) return;
    
    setDownloadingPdf(true);
    
    try {
      // Create temporary container
      const element = document.createElement('div');
      element.className = 'pdf-container';
      
      // Add header with all details
      const header = document.createElement('div');
      header.innerHTML = `
        <div class="pdf-header">
          <h1>${formData.topic}</h1>
          ${formData.studentName ? `<p><strong>Name:</strong> ${formData.studentName}</p>` : ''}
          ${formData.school ? `<p><strong>School:</strong> ${formData.school}</p>` : ''}
          ${formData.course ? `<p><strong>Course:</strong> ${formData.course}</p>` : ''}
          <p><strong>Subject:</strong> ${formData.subject}</p>
          <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
        </div>
        <hr/>
      `;
      element.appendChild(header);
      
      // Create a temporary div for markdown rendering
      const tempDiv = document.createElement('div');
      const markdownContent = document.querySelector('.markdown-body');
      if (markdownContent) {
        tempDiv.innerHTML = markdownContent.innerHTML;
        
        // Clean up any React-specific attributes
        tempDiv.querySelectorAll('*').forEach(el => {
          el.removeAttribute('data-reactroot');
          el.removeAttribute('data-react-checksum');
          el.removeAttribute('data-react-id');
        });
      }
      
      // Add the cleaned content
      const content = document.createElement('div');
      content.className = 'markdown-body';
      content.innerHTML = tempDiv.innerHTML;
      element.appendChild(content);
      
      // Add footer
      const footer = document.createElement('div');
      footer.innerHTML = `
        <hr/>
        <p>Generated by Engineering Hub</p>
        <p>Date: ${new Date().toLocaleDateString()}</p>
      `;
      element.appendChild(footer);
      
      const opt = {
        margin: [10, 10],
        filename: `${formData.studentName ? `${formData.studentName}_` : ''}${formData.topic.replace(/\s+/g, '_')}_solution.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { 
          scale: 2,
          useCORS: true,
          logging: false
        },
        jsPDF: { 
          unit: 'mm', 
          format: 'a4', 
          orientation: 'portrait' 
        },
        pagebreak: { mode: 'avoid-all' }
      };

      // Add CSS styles for PDF generation
      const style = document.createElement('style');
      style.textContent = `
        .pdf-container {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #24292e;
        }
        .pdf-container code {
          background-color: #f6f8fa;
          padding: 2px 4px;
          border-radius: 4px;
          font-family: 'Courier New', monospace;
        }
        .pdf-container pre {
          background-color: #f6f8fa;
          padding: 16px;
          border-radius: 6px;
          overflow-x: auto;
        }
        .pdf-container h1, 
        .pdf-container h2, 
        .pdf-container h3, 
        .pdf-container h4, 
        .pdf-container h5, 
        .pdf-container h6 {
          margin-top: 24px;
          margin-bottom: 16px;
          font-weight: 600;
          line-height: 1.25;
        }
        .pdf-container p {
          margin-bottom: 16px;
        }
        .pdf-container ul,
        .pdf-container ol {
          padding-left: 2em;
          margin-bottom: 16px;
        }
      `;
      element.appendChild(style);

      await html2pdf().set(opt).from(element).save();
      
    } catch (error) {
      console.error('PDF generation error:', error);
      setError('Failed to generate PDF. Please try again.');
    } finally {
      setDownloadingPdf(false);
    }
  };

  // Custom renderers for ReactMarkdown
  const renderers = {
    code({ node, inline, className, children, ...props }) {
      const match = /language-(\w+)/.exec(className || '');
      return !inline && match ? (
        <SyntaxHighlighter
          style={vscDarkPlus}
          language={match[1]}
          PreTag="div"
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      ) : (
        <code className={className} {...props}>
          {children}
        </code>
      );
    }
  };

  return (
    <div className="ai-assignment-helper">
      <motion.div 
        className="assignment-container"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <h1>AI Assignment Assistant</h1>
        
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Engineering Subject</label>
            <select 
              name="subject"
              value={formData.subject}
              onChange={handleInputChange}
              required
            >
              <option value="">Select Subject</option>
              <option value="structural">Structural Engineering</option>
              <option value="mechanical">Mechanical Engineering</option>
              <option value="electrical">Electrical Engineering</option>
              <option value="civil">Civil Engineering</option>
              <option value="chemical">Chemical Engineering</option>
            </select>
          </div>

          <div className="form-group">
            <label>Assignment Topic</label>
            <input
              type="text"
              name="topic"
              value={formData.topic}
              onChange={handleInputChange}
              placeholder="Enter the main topic of your assignment"
              required
            />
          </div>

          <div className="form-group">
            <label>Assignment Details</label>
            <textarea
              name="details"
              value={formData.details}
              onChange={handleInputChange}
              placeholder="Provide detailed requirements, questions, or specific points to be covered..."
              rows={10}
              required
            />
          </div>

          <button 
            type="button" 
            className="toggle-details-btn"
            onClick={() => setShowUserDetails(!showUserDetails)}
          >
            {showUserDetails ? 'Hide Personal Details' : 'Add Personal Details (Optional)'}
          </button>

          {showUserDetails && (
            <motion.div 
              className="user-details"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
            >
              <div className="form-group">
                <label>Your Name (Optional)</label>
                <input
                  type="text"
                  name="studentName"
                  value={formData.studentName}
                  onChange={handleInputChange}
                  placeholder="Enter your name"
                />
              </div>

              <div className="form-group">
                <label>School/University (Optional)</label>
                <input
                  type="text"
                  name="school"
                  value={formData.school}
                  onChange={handleInputChange}
                  placeholder="Enter your school or university"
                />
              </div>

              <div className="form-group">
                <label>Course (Optional)</label>
                <input
                  type="text"
                  name="course"
                  value={formData.course}
                  onChange={handleInputChange}
                  placeholder="Enter your course"
                />
              </div>
            </motion.div>
          )}

          <button 
            type="submit" 
            className="submit-btn"
            disabled={loading}
          >
            {loading ? 'Generating Solution...' : 'Generate Solution'}
          </button>
        </form>

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        {solution && (
          <motion.div 
            className="solution-container"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <h2>Solution</h2>
            <div className="solution-content markdown-body">
              <ReactMarkdown 
                remarkPlugins={[remarkGfm]}
                components={renderers}
              >
                {solution}
              </ReactMarkdown>
            </div>
            
            <div className="action-buttons">
              <button 
                onClick={handleDownloadPDF}
                className="download-btn"
                disabled={downloadingPdf}
              >
                <i className="fas fa-download"></i>
                {downloadingPdf ? 'Generating PDF...' : 'Download PDF'}
              </button>
              
              <button 
                onClick={() => {
                  setSolution(null);
                  setFormData(prev => ({
                    ...prev,
                    subject: '',
                    topic: '',
                    details: ''
                  }));
                }}
                className="new-assignment-btn"
              >
                New Assignment
              </button>
            </div>
          </motion.div>
        )}
      </motion.div>
    </div>
  );
};

export default AIAssignmentHelper;